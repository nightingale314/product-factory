# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: nightingale16
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: ai-product-hub
# "service" is the name of this project. This will also be added to your AWS resource names.
service: enrichment-service

plugins:
  - serverless-offline
  - serverless-lift
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "sqs:SendMessage"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:GetQueueAttributes"
            - "lambda:InvokeFunction"
          Resource: "*"

package:
  individually: true
  patterns:
    - "../../node_modules/.pnpm/@prisma+client@*/node_modules/.prisma/**/*"
    - "../../node_modules/.pnpm/@prisma+client@*/node_modules/@prisma/client/**/*"
    - "../../node_modules/.pnpm/@prisma+client@*/node_modules/.prisma/client/libquery_engine-linux-*"
    - "../../node_modules/.pnpm/@prisma+client@*/node_modules/.prisma/client/libquery_engine-rhel-*"

functions:
  startEnrichmentTask:
    handler: startEnrichmentTask.handler
    environment:
      ENRICHMENT_QUEUE_URL: ${construct:enrichment-queue.queueUrl}

constructs:
  enrichment-queue:
    type: queue
    batchSize: 1
    maxRetries: 1
    maxConcurrency: 10
    worker:
      handler: worker.handler
      timeout: 600
